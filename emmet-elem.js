const t=new Map;let e;function r(r){e=r,t.clear()}function n(r,n){const i=e||("undefined"==typeof document?void 0:document),s=n?.doc||i,c=n?.cache||(s==i?t:void 0);r=o(r)?r.raw:r;let a=c?.get(r);a||(a=l(s,"string"!=typeof r?r:[r]),c?.set(r,a));const f=a.cloneNode(!0),d={length:0};if("string"==typeof r||r.length<2)return{doc:s,root:f,slots:d};for(const t of f.querySelectorAll("emmet-slot")){const e=parseInt(t.getAttribute("n")),r=d[e];d.length<=e&&(d.length=e+1),r?Array.isArray(r)?r.push(t):d[e]=[r,t]:d[e]=t}return{doc:s,root:f,slots:d}}function o(t){return Array.isArray(t.raw)}function i(t,...e){const r=n(t);if(!e||0==e.length)return r;const o=r.slots,i=r.doc;let s=-1;for(const t of e){s+=1;const e=o[s];if(null==t||""===t||!e)continue;const r=Array.isArray(e)?e:[e];if("function"==typeof t){const e=r.length;let n=0;for(const o of r){const r=c(i,t(s,n,e,o));n+=1,r&&o.appendChild(r)}}else{if("object"==typeof t&&t.then){t.then((t=>{if(null==t||""===t)return;const e=r.length;for(let n=0;n<e;){const o=r[n++];0==o.childNodes.length&&("object"==typeof t?o.appendChild(n==e?t:t.cloneNode(!0)):o.textContent=t.toString())}}));continue}{let e=0;const n=r.length;for(const o of r)e+=1,0==o.childNodes.length&&null!=t&&""!==t&&("object"==typeof t?o.appendChild(e==n?t:t.cloneNode(!0)):o.textContent=t.toString())}}}return r}function s(t,...e){const{doc:r,root:o,slots:i}=n(t);if(!e||0==e.length)return o;for(let t=0;t<e.length;t++){const n=i[t];if(!n)continue;const o=Array.isArray(n)?n:[n],s=o.length,l=e[t];if(null==l||""===l)for(const t of o)t.remove();else{if("function"==typeof l){let e=0;for(const n of o){const o=n.parentNode,i=c(r,l(t,e++,s,o));i?o.replaceChild(i,n):n.remove()}continue}{const t=c(r,l);for(let e=0;e<s;){const r=o[e++];r.parentNode.replaceChild(e==s?t:t.cloneNode(!0),r)}}}}return o}function c(t,e){if(null!=e&&""!==e)return"number"==typeof e?t.createTextNode(e.toString()):"string"==typeof e?t.createTextNode(e):e}function l(t,e){if(!e||0==e.length)throw Error("expected emmet input");const r=[];let n,o,i,s=0,c=e[0];for(;;){let l=c.search(/[^\p{L}\p{N}_-]/u);if(-1===l){if(!c){if(s+=1,s<e.length){c=e[s];const r=o.appendChild(t.createElement("emmet-slot"));r.setAttribute("n",""+(s-1)),o=r;continue}break}l=c.length}if(0===l){if(c.startsWith("(")){r.push([n,o]),c=c.substring(1),n=void 0,o=void 0;continue}if(c.startsWith(")")&&r.length&&n){const[t,e]=r.pop();o=n,i=e,n=t,c=c.substring(1)}else if(!o)throw Error("unexpected character in emmet")}else{const r=c.substring(0,l),i=t.createElement(r);if(o?o.appendChild(i):n=i,o=i,c.length==l){if(s+=1,s<e.length)throw Error("unexpected varaible slot "+s);break}for(c=c.substring(l),c.startsWith("#")&&(l=c.substring(1).search(/[^\p{L}\p{N}_-]/u)+1,0===l&&(l=c.length),o.id=c.substring(1,l),c=c.substring(l));c.startsWith(".");)l=c.substring(1).search(/[^\p{L}\p{N}_-]/u)+1,0===l&&(l=c.length),o.classList.add(c.substring(1,l)),c=c.substring(l);for(;c.startsWith("[");)for(c=c.substring(1);;){const t=c.search(/[=\] ]/);if(-1===t)throw Error("eof in emmet attribute");const e=c.substring(0,t),r=c.charAt(t);if("="===r){let r;if('"'==c.charAt(t+1)){if(c=c.substring(t+2),l=c.indexOf('"'),-1===l)throw Error("eof in emmet attribute value");r=1}else{if(c=c.substring(t+1),l=c.search(/[\] ]/),-1===l)throw Error("eof in emmet attribute value");r=0}const n=c.substring(0,l);l+=r;const i=c.charAt(l);if(c=c.substring(l+1),o.setAttribute(e,n)," "==i)continue;if("]"==i)break;throw Error("expected end or space after emmet attribute value")}if(c=c.substring(t+1),o.setAttribute(e,"")," "!=r){if("]"==r)break;throw Error("expected end or space after emmet attribute value")}}for(;c.startsWith("{");){if(l=c.indexOf("}"),-1===l)throw Error("eof in emmet content");o.appendChild(t.createTextNode(c.substring(1,l))),c=c.substring(l+1)}}if(""==c&&s+1==e.length){i&&(i.appendChild(o),i=void 0);break}if(c.startsWith("*")){let r=c.substring(1).search(/[^0-9]/);if(-1==r&&(r=c.length-1),0==r)throw Error("no number in emmet multiplication");const l=parseInt(c.substring(1,r+1));if(0==l)throw Error("zero multiplication not allowed");if(1!=l){const e=t.createDocumentFragment();for(let t=1;t<l;t++)e.appendChild(o.cloneNode(!0));const r=o.parentNode;e.appendChild(o),i?(i.appendChild(e),i=void 0):r?r.appendChild(e):n=e}else i&&(i.appendChild(o),i=void 0);if(c=c.substring(r+1),""==c&&s+1==e.length)break}if(i&&(i.appendChild(o),i=void 0),c.startsWith(">"))c=c.substring(1);else if(c.startsWith("^")){if(!o.parentNode)throw Error("invalid depth");for(o=o.parentNode;c.startsWith("^");){if(o.parentNode)o=o.parentNode;else{if(11===o.nodeType)throw Error("invalid depth");n=t.createDocumentFragment(),n.appendChild(o),o=n}c=c.substring(1)}}else c.startsWith("+")&&(o.parentNode?o=o.parentNode:(n=t.createDocumentFragment(),n.appendChild(o),o=n),c=c.substring(1))}if(r.length)throw Error("unexpected eof, emmet expected group end");if(!o)throw Error("unexpected eof, no content found");return n||(n=o),n}export{s as emmet,n as emmetSlots,r as setDefDoc,i as slotted};
//# sourceMappingURL=emmet-elem.js.map
