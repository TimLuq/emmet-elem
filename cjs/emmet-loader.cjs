Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./emmet-compress.cjs");const t=e=>`import { emmet } from "emmet-elem";const f=()=>emmet(${JSON.stringify(e)});export default f;`;function n(e){return"string"==typeof e?[RegExp(e)]:e instanceof RegExp?[e]:e.map((e=>"string"==typeof e?RegExp(e):e))}exports.default=function(n,s,r){const l=new e,m=l.write(n);if(m){const e=this.async();m.then((()=>{e(null,t(l.end()),s,r)})).catch(e)}else this.callback()(null,t(l.end()),s,r)},exports.rollupLoader=function(s){const r={...s||{}},l=r.exclude?n(r.exclude):[/(^|\/)node_modules/],m=r.include?n(r.include):[/\.(?:xml|html|xhtml|svg|xsl|xslt|mathml|xsd)$/],o=r.includeRaw?n(r.includeRaw):[/\.emmet$/];return{name:"emmet",load(n){const s=n.replace(/\\/g,"/");return l.some((e=>!!s.match(e)))?null:o.some((e=>!!s.match(e)))?import("fs/promises").then((({readFile:e})=>e(n,"utf8"))).then((e=>t(e))):m.some((e=>!!s.match(e)))?import("fs/promises").then((({readFile:e})=>e(n,"utf8"))).then((n=>{const s=new e(r.parser),l=s.write(n);return l?l.then((()=>t(s.end()))):t(s.end())})):null}}};
//# sourceMappingURL=emmet-loader.cjs.map
