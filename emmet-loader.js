import e from"./emmet-compress.js";const t=e=>`import { emmet } from "emmet-elem";const f=()=>emmet(${JSON.stringify(e)});export default f;`;function n(n,m,s){const l=new e,o=l.write(n);if(o){const e=this.async();o.then((()=>{e(null,t(l.end()),m,s)})).catch(e)}else this.callback()(null,t(l.end()),m,s)}function m(e){return"string"==typeof e?[RegExp(e)]:e instanceof RegExp?[e]:e.map((e=>"string"==typeof e?RegExp(e):e))}function s(n){const s={...n||{}},l=s.exclude?m(s.exclude):[/(^|\/)node_modules/],o=s.include?m(s.include):[/\.(?:xml|html|xhtml|svg|xsl|xslt|mathml|xsd)$/],r=s.includeRaw?m(s.includeRaw):[/\.emmet$/];return{name:"emmet",load(n){const m=n.replace(/\\/g,"/");return l.some((e=>!!m.match(e)))?null:r.some((e=>!!m.match(e)))?import("fs/promises").then((({readFile:e})=>e(n,"utf8"))).then((e=>t(e))):o.some((e=>!!m.match(e)))?import("fs/promises").then((({readFile:e})=>e(n,"utf8"))).then((n=>{const m=new e(s.parser),l=m.write(n);return l?l.then((()=>t(m.end()))):t(m.end())})):null}}}export{n as default,s as rollupLoader};
//# sourceMappingURL=emmet-loader.js.map
